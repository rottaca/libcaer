Release 2.1.5 - 02.06.2017
BUG FIXES
- DAVIS FX3: require new logic revision 9910 for FX3 devices.
  This fixes a bug in timestamp synchronization between multiple
  cameras, and improves precision of some time related parameters,
  namely APS_EXPOSURE, APS_FRAME_DELAY and USB_EARLY_PACKET_DELAY.
- DAVIS: fix incorrect extra log message when opening FX3 devices.


Release 2.1.4 - 30.05.2017
BUG FIXES
- C++: functions defined in C++ header files, such as happens in log or
  utils, need the inline keyword to allow the linker to resolve symbols
  properly. Fixes #14.


Release 2.1.3 - 28.05.2017
NEW FEATURES
- DAVIS: new device type CAER_DEVICE_DAVIS is now available, handles both
  FX2 and FX3 board-based devices transparently.

BUG FIXES
- C++ devices/usb.hpp: add missing std::string include.
- Devices: log failure to put new event packet containers on ring-buffer for
  consumption by clients with higher log-level of CAER_LOG_NOTICE.


Release 2.1.2 - 24.05.2017
BUG FIXES
- FrameUtils/C++ FrameEvent: fix detection of OpenCV presence.
- CMake: add dependency on libm for math.h functions.


Release 2.1.1 - 23.05.2017
BUG FIXES
- AutoExposure: disable debug logging.
- AutoExposure: get out of highly over/under-exposed situations much faster.


Release 2.1.0 - 22.05.2017
INCOMPATIBLE CHANGES
- usb.h: the 'dataShutdownNotify' callback of caerDeviceDataStart() will only
  be called on exceptional shutdowns now. Normal shutdowns, such as those from
  calling caerDeviceDataStop(), will not execute the callback anymore.
  The documentation for caerDeviceDataStart() and caerDeviceDataStop() has been
  updated accordingly.
- DAVIS: requires new logic revision 9880.

NEW FEATURES
- davis.h: added automatic exposure control, can be turned on/off with
  the DAVIS_CONFIG_APS_AUTOEXPOSURE configuration parameter, defaults to off.
- EventPackets (C/C++): added caerEventPacketGetDataSize() and
  caerEventPacketGetSize() functions to easily get packet size in bytes.
- C++ FrameEvent: added new function getOpenCVMat() to frame event, if
  OpenCV is enabled. Returns a cv::Mat representing the frame's pixels, with
  support for deep-const by cloning (can be disabled for efficiency).
- C++ Utils: enhanced makeUniqueFromCStruct() and makeSharedFromCStruct() to
  also allow a 'takeMemoryOwnership' parameter that is forwarded to the event
  packet constructors; it defaults to true like the constructors themselves.
- Devices (C/C++): added new CAER_HOST_CONFIG_LOG config module with parameter
  CAER_HOST_CONFIG_LOG_LEVEL to set per-device log-level; by default the
  log-level is equal to the current global one at device opening.

BUG FIXES
- libcaer.hpp: undefine log-level names to avoid name clashes.
- DAVIS: removed variable APS ADC Shift, is not used by any camera currently
  offered, all have 10 bits precision.
- DAVIS: fix black APS pixels on very high illumination.
- DAVIS240: fix low range of APS pixels due to reduced ADC dynamic range.
- USB: libusb-based USB communication completely rewritten, now there is one
  thread responsible for USB event handling only, while transfers are sent,
  started/stopped etc. from other threads. This avoids possible dead-locks,
  or other threads stealing the USB event handling, or new settings not being
  sent to the device under certain load conditions. This required a small
  change in the API, please see "INCOMPATIBLE CHANGES" above for more details.


Release 2.0.2 - 27.04.2017
NEW FEATURES
- Logging: added caerLogFileDescriptorsGetFirst(), caerLogFileDescriptorsGetSecond()
  functions to get the two file descriptors where log messages go to.
- Logging: added caerLogVAFull() function to allow full control over all
  parameters involved in logging, especially the log-level.
- Dynap-se: added support for experimental DYNAPSE_CONFIG_SPIKEGEN
  control and improved DYNAPSE_CONFIG_SRAM control (thanks to Carsten Nielsen).
- Updated C++ examples to use C++ logging functions.
- Updated C++ interface to reflect above changes.


Release 2.0.1 - 16.03.2017
NOTE: this release is numbered 2.0.1 and not 2.0.0, because 2.0.0 was the
development version. To ensure people can depend on the now actually released
version, the version number was increased to 2.0.1 for the official release.

INCOMPATIBLE CHANGES
- The Frame Event format changed to have the origin (0, 0) in the upper left
  corner of the image, following standard computer graphics conventions now.
  Before it was in the lower left corner, following the OpenGL convention.
  This was changed to more easily be able to benefit from the wealth of
  computer graphics libraries available, such as OpenCV.
  caerFrameEventGetPixelArrayCGFormat() has been removed as a consequence.
- The Polarity Event format has also changed its origin to the upper left corner.
- Device INFO structures have additional data members now, be sure to
  recompile anything depending on those!
- CAER_HOST_CONFIG_PACKETS_MAX_*_SIZE and MAX_*_INTERVAL options have been
  removed, the whole data packeting system is now much simpler with only
  two configuration options to control it:
  - CAER_HOST_CONFIG_PACKETS_MAX_CONTAINER_PACKET_SIZE
  - CAER_HOST_CONFIG_PACKETS_MAX_CONTAINER_INTERVAL
  These act at the event packet container level. See packetContainer.h
  documentation on more information for how this works.
- Removed LIBCAER_LOG_NONE define from headers, it is now not possible
  to completely suppress log output anymore.
- caerGenericEventGetEvent() has had its bounds restricted to [0,eventNumber[
  instead of [0,eventCapacity[.
- Event packet copy functions have been renamed to:
  - caerEventPacketCopy()
  - caerEventPacketCopyOnlyEvents()
  - caerEventPacketCopyOnlyValidEvents()

NEW FEATURES
- Support for the iniLabs DYNAP-SE neuromorphic chip was added.
- Added new event type Spike Event for spiking neurons.
- Added new event types Point1D, Point2D, Point3D and Point4D to
  hold floating point data in multiple dimensions.
- New event packet functions were added:
  - caerEventPacketEquals()
  - caerEventPacketClear()
  - caerEventPacketClean()
  - caerEventPacketResize()
  - caerEventPacketGrow()
  - caerEventPacketAppend()
- Full native support for C++11 through header library (libcaercpp).
- Improved const-qualification of functions, to allow better compile
  time checks for read-only data. A GetEventConst() function was added
  to each event type as part of this, to get read-only events.
- Const, reverse and const-reverse iterators were added to all event types.
- davis.h: added support for stereo microphones on DAVIS346mini.
- davis.h: added support for extra signal detectors.
- network.h: added header with functions to help parse AEDAT 3.X
  network stream headers.
- frame.h: added support for more color filter configurations.
- packetContainer.h: better documentation, now tracks lowest and highest
  timestamps contained, as well as number of total and valid events.
- packetContainer.h: added caerEventPacketContainerUpdateStatistics() to
  update above statistics. Automatically called on each addition or
  removal of an event packet from the container.
- packetContainer.h: added caerEventPacketContainerFindEventPacketByType*(),
  caerEventPacketContainerCopyAllEvents() and caerEventPacketContainerCopyValidEvents()
  functions to search for event packets by type and to make deep-copies of them.
- special.h: added new Special Event types, to support extra signal detection
  schemes and add Frame Event related timing information.
- special.h: added caerSpecialEventPacketFindEventByType*() and
  caerSpecialEventPacketFindValidEventByType*() functions to search for
  a specified type of special event.
- libcaer.h: added LIBCAER_VERSION, LIBCAER_NAME_STRING,
  LIBCAER_VERSION_STRING and LIBCAER_HAVE_OPENCV defines.
- log.h: added caerLogVA() function to pass va_list arguments directly.


Release 1.0.3 - 28.03.2016
INCOMPATIBLE CHANGES
- davis_fx2.c: removed specific FX2 code, now uses same backend as FX3
  for sending all configuration values, due to new firmware version 3
  for FX2 DAVIS small-board cameras. A firmware update is required,
  please follow the instructions at http://inilabs.com/support/reflashing/.

NEW FEATURES
- frame.h: add function caerFrameEventGetPixelArrayCGFormat() to
  Frame Event, allows to get a copy of the pixels array in the
  standard computer graphics format (pixel (0, 0) in upper left
  corner) efficently.
- davis.h: add DAVIS_CONFIG_APS_ADC_TEST_MODE parameter to APS module.


Release 1.0.2 - 08.01.2016
IMCOMPATIBLE CHANGES
- frame.h: rename channel number to color channels and add color
  filter information, to better specify the information needed
  to reconstruct color frames. The 'enum caer_frame_event_color_channels'
  and 'enum caer_frame_event_color_filter' hold the possible values.
  This change is backwards-compatible with older frame format!
- davis.h, dvs128.h: changed info data structure's integers to be
  signed for better cross-language compatibility. Also 'deviceID'
  can now be compared directly with 'sourceID' from event packets.
- davis.h: changed type of 'apsColorFilter' in info data structure
  to take advantage of new 'enum caer_frame_event_color_filter'.

NEW FEATURES
- common.h: add generic functions for event packet copying, with
  support for packet size reductions (copy only valid).
- libcaer.h: add generic clear, get and set functions for bitfields,
  and use them in all the event functions to avoid errors.
- config.h: add device configuration event type, for tracking
  of device configuration changes in the event stream.
- log.c: add timezone information to log message time information.
- dvs128_simple.cpp, davis_simple.cpp: add C++11 example variants.
- Enable more Clang compiler warnings.

BUG FIXES
- davis_common.c: only update the ROI size information if ROI
  updates actually came in from the device.
- Fix and improve documentation, especially for the frame event.
- Fix off-by-one in event's GetEvent() function's warning log message.
- device.c: mark global function pointer arrays static.
- common.h, frame.h: fix compilation of inline functions in
  strict C++11 mode.


Release 1.0.1 - 06.11.2015
INCOMPATIBLE CHANGES
- Requires firmware version 2 and logic revision 7449.
- usb.h: improved caerDeviceDataStart() API to also allow for
  notification of data acquisition shutdown, to be able to react
  to abnormal shutdown cases, like when a device is unplugged.
- frame.h: changed in-memory format for easier handling and compatibility
  with the other event formats (all-in-one memory block).
- davis.h: rename DAVIS240 APSOVERFLOWLEVEL to APSOVERFLOWLEVELBN.

NEW FEATURES
- Headers are C++ compatible and stand-alone now.
- MacOS X support.
- Added pkg-config file for library.
- Full API documentation (see docs/ for PDF).
- Various cmake/build improvements. Support out-of-tree builds.
- Add iterator macros for EventPackets.
- frame.h: added ROI region ID tracking, as well as ROI position.
  Added caerFrameEventGetExposureLength() and caerFrameEventGetTimestamp(),
  which is defined as the median of the exposure times.
  Added caerFrameEventPacketGetPixelsSize() and caerFrameEventPacketGetPixelsMaxIndex()
  for EventPacket-level size information.
  Added caerFrameEventGetPixelsSize() and caerFrameEventGetPixelsMaxIndex()
  for Event-level size information.
- log.h: added caerLogFileDescriptorsSet() to allow logging to
  up to two different file descriptors (defaults to STDERR only).
- davis.h: added chipID check macros.
- davis.h: added DAVIS_CONFIG_APS_SNAPSHOT to take one frame snapshots.
- dvs128.h: added DVS128_CONFIG_DVS_TS_MASTER to select timestamp
  master or slave behavior (timestamp synchronization).
- davis_common.c: added support for outputting only reset read or
  signal read frames, for debugging purposes.
- c11threads_posix.h: C11-compatible thread abstraction, for
  both Linux and MacOS X, based on POSIX Threads.

BUG FIXES
- Relaxed atomic operations memory constraints for better
  performance on weakly-ordered architectures (like ARM).
- log.c: call tzset() before localtime_r(), as per standard.
- davis_common.c: improved Region of Interest support (APS).
- davis_fx2.c: keep GlobalShutter flag correctly in-sync.
- davis_fx3.c: fixed support for new FX3 devices.
- packetContainer.h: handle container being NULL by returning NULL.


Release 1.0.0 - 02.10.2015
- Initial release.
